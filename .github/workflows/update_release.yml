name: Update Release
on:
  push:
    paths:
      - "VERSION"
    branches:
      - main

jobs:
  get-release-asset:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set ENVs
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION"=${VERSION} >> $GITHUB_ENV
          echo "FILE_NAME=setops-cli_${VERSION}_darwin_amd64.bz2" >> $GITHUB_ENV

      - name: Get release ID for tag
        run: | 
          RELEASE_DATA=$(curl https://${{ secrets.MANAGER_GITHUB_TOKEN }}@api.github.com/repos/setopsco/manager/releases)
          RELEASE_ID=$(echo $RELEASE_DATA | jq ". | map(select(.tag_name == \"${{ env.VERSION }}\"))[0].id")
          if [ "$RELEASE_ID" = "null" ]
          then
            echo "Release not found"
            exit 1
          fi
          echo "RELEASE_ID=${RELEASE_ID}" >> $GITHUB_ENV 

      - name: Get latest release
        run: |
          RELEASE_DATA=$(curl https://${{ secrets.MANAGER_GITHUB_TOKEN }}@api.github.com/repos/setopsco/manager/releases/${{ env.RELEASE_ID }})
          ASSET_ID=$(echo $RELEASE_DATA | jq -r ".assets | map(select(.name == \"${{ env.FILE_NAME }}\"))[0].id")
          if [ "$ASSET_ID" = "null" ]
          then
            echo "Release asset not found"
            exit 1
          fi
          curl -J -L -H "Accept: application/octet-stream" \
          "https://${{ secrets.MANAGER_GITHUB_TOKEN }}@api.github.com/repos/setopsco/manager/releases/assets/$ASSET_ID" \
          -o ${{ env.FILE_NAME }}

      - name: Store release file as artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.FILE_NAME }}
          path: ${{ env.FILE_NAME }}

  create-release:
    runs-on: ubuntu-latest
    needs:
      - get-release-asset
    steps:
      - uses: actions/checkout@v2

      - name: Set ENVs
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION"=${VERSION} >> $GITHUB_ENV
          echo "FILE_NAME=setops-cli_${VERSION}_darwin_amd64.bz2" >> $GITHUB_ENV

      - name: Download fetched asset
        uses: actions/download-artifact@v1
        with:
          name: ${{ env.FILE_NAME }}
  
      - name: Create release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: true
          body: "Updates release to ${{ env.VERSION }}"
      
      - name: Upload release asset (cli darwin amd64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.FILE_NAME }}/${{ env.FILE_NAME }}
          asset_name: ${{ env.FILE_NAME }}
          asset_content_type: application/x-bzip

  update-formula:
    runs-on: ubuntu-latest
    needs: 
      - get-release-asset
      - create-release
    steps:
      - uses: actions/checkout@v2

      - name: Set ENVs
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION"=${VERSION} >> $GITHUB_ENV
          echo "FORMULA_VERSION=$(echo ${VERSION} | sed 's|v||g')" >> $GITHUB_ENV
          echo "FILE_NAME=setops-cli_${VERSION}_darwin_amd64.bz2" >> $GITHUB_ENV
          echo "FORMULA_EXECUTABLE_NAME=setops-cli_${VERSION}_darwin_amd64" >> $GITHUB_ENV

      - name: Download fetched asset
        uses: actions/download-artifact@v1
        with:
          name: ${{ env.FILE_NAME }}

      - name: Calculate file checksum
        run: |
          FILE_CHECKSUM=($(sha256sum ./${{ env.FILE_NAME }}/${{ env.FILE_NAME }}))
          echo "FORMULA_CHECKSUM=${FILE_CHECKSUM}" >> $GITHUB_ENV
      
      - name: Get release ID for tag
        run: | 
          RELEASE_DATA=$(curl https://api.github.com/repos/setopsco/homebrew-manager/releases)
          RELEASE_ID=$(echo $RELEASE_DATA | jq ". | map(select(.tag_name == \"${{ env.VERSION }}\"))[0].id")
          if [ "$RELEASE_ID" = "null" ]
          then
            echo "Release not found"
            exit 1
          fi
          echo "RELEASE_ID=${RELEASE_ID}" >> $GITHUB_ENV

      - name: Get asset url
        run: |
          RELEASE_DATA=$(curl https://api.github.com/repos/setopsco/homebrew-manager/releases/${{ env.RELEASE_ID }})
          ASSET_ID=$(echo $RELEASE_DATA | jq -r ".assets | map(select(.name == \"${{ env.FILE_NAME }}\"))[0].id")
          echo "FORMULA_ASSET_URL=https://api.github.com/repos/setopsco/homebrew-manager/releases/assets/${ASSET_ID}" >> $GITHUB_ENV

      - name: Update formula
        run: |
          sed -i 's|version \".*\"|version \"${{ env.FORMULA_VERSION }}\"|g' Formula/setops-cli.rb
          sed -i 's|sha256 \".*\"|sha256 \"${{ env.FORMULA_CHECKSUM }}\"|g' Formula/setops-cli.rb
          sed -i 's|url \".*\"|url \"${{ env.FORMULA_ASSET_URL }}\"|g' Formula/setops-cli.rb
          sed -i 's|RELEASE_FILE_NAME = \".*\".freeze|RELEASE_FILE_NAME = \"${{ env.FORMULA_EXECUTABLE_NAME }}\".freeze|g' Formula/setops-cli.rb

      - name: Validate changes
        run: |
          git diff

      - name: Configure git
        run: |
          git config --global user.email "admin@setops.co"
          git config --global user.name "SetOps GitHub Action"
      
      - name: Commit formula update
        run: |
          git add --force Formula/setops-cli.rb
          git commit -m ":arrow_up: Updates formula to ${{ env.VERSION }}"

      - name: Push formula update
        run: git push
      